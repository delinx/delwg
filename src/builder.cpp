#include "builder.hpp"
#include <iostream>
#include <sstream>
#include <string>

Builder::Builder()
{
}

Builder::Page::Page(std::string fileName)
{
    Builder::Page::Page::fileName = fileName;
}


void Builder::Page::addStyleFile(std::string path)
{
    head += "<link rel=\"stylesheet\" href=\"" + path + "\">";
}

std::string Builder::Page::generate()
{
    std::stringstream data;

    data << "<!DOCTYPE html>"
         << std::endl
         << "<html>"
         << std::endl
         << "<head>"
         << std::endl
         << Builder::Page::head
         << std::endl
         << "</head>"
         << std::endl
         << "<body>"
         << std::endl
         << Builder::Page::body
         << std::endl
         << "</body>"
         << std::endl
         << "</html>"
         << std::endl
         << "<!-- Generated by delwg -->"
         << std::endl;

    return data.str();
}

std::string Builder::fileToString(std::string path)
{
    std::ifstream t(path);
    std::stringstream buffer;
    buffer << t.rdbuf();
    return buffer.str();
}

std::string Builder::replaceString(std::string source, std::string target, std::string text)
{
    u64 result = source.find(target);
    if(result <= source.length())
    {
        return source.replace(source.find(target), target.length(), text);
    }
    return source;
}

// Empty line is a new line
// # is a header
// * is a list
// [text](link) is a link
// ![text](link) is a image
// **bold** is bold
// *italic* is italic
std::string Builder::parseMarkdown(const std::string& input)
{
    std::string output;

    std::istringstream f(input);
    std::string line;

    bool inList = false;
    bool inParagraph = false;

    std::regex image_regex("!\\[(.+?)\\]\\((.+?)\\)");
    std::regex link_regex("\\[(.+?)\\]\\((.+?)\\)");

    while(std::getline(f, line))
    {
        // replace images
        line = std::regex_replace(line, image_regex, "<img src=\"$2\" alt=\"$1\">");
        // repace links
        line = std::regex_replace(line, link_regex, "<a href=\"$2\">$1</a>");

        // replace \n to <br> code
        while(line.find("\\n") != std::string::npos)
        {
            u64 pos = line.find("\\n");
            if(pos + 2 < line.length())
            {
                if(line[pos + 2] == ' ')
                {
                    line.replace(pos, 3, "<br>");
                }
                else
                {
                    line.replace(pos, 2, "<br>");
                }
            }
            else  // in case we are at the end of the line
            {
                line.replace(pos, 2, "<br>");
            }
        }
        // bold
        bool bold = false;
        while(line.find("**") != std::string::npos)
        {
            u64 pos = line.find("**");
            if(!bold)
            {
                line.replace(pos, 2, "<b>");
                bold = true;
            }
            else
            {
                line.replace(pos, 2, "</b>");
                bold = false;
            }
        }
        // italic
        bool italic = false;
        while(line.find("__") != std::string::npos)
        {
            u64 pos = line.find("__");
            if(!bold)
            {
                line.replace(pos, 2, "<i>");
                bold = true;
            }
            else
            {
                line.replace(pos, 2, "</i>");
                bold = false;
            }
        }

        // beginning types
        if(line == "")
        {
            if(inParagraph)
            {
                output += "</p>";
                inParagraph = false;
            }
            else
            {
                output += "<br>";
            }
        }
        // divider \---
        if(line.length() == 4)
        {
            if(line[0] == '\\' && line[1] == '-' && line[2] == '-' && line[3] == '-')
            {
                if(inParagraph)
                {
                    output += "</p>";
                    inParagraph = false;
                }
                output += "<hr>";
            }
        }
        else if(line[0] == '#')
        {
            if(inParagraph)
            {
                output += "</p>";
                inParagraph = false;
            }

            u8 hlevel = 0;
            for(size_t i = 0; i < line.length(); i++)
            {
                if(line[i] != '#')
                {
                    break;
                }
                else
                {
                    hlevel++;
                }
            }

            if(hlevel > 6)
            {
                hlevel = 6;
            }

            std::string hlevelStr = std::to_string(hlevel);
            output += "<h" + hlevelStr + ">" + line.substr(hlevel) + "</h" + hlevelStr + ">";
        }
        else if(line[0] == '*')
        {
            if(inParagraph)
            {
                output += "</p>";
                inParagraph = false;
            }

            if(!inList)
            {
                output += "<ul>";
                inList = true;
            }
            output += "<li>" + line.substr(1) + "</li>";
        }
        else if(line[0] != '*' && inList)
        {
            if(inParagraph)
            {
                output += "</p>";
                inParagraph = false;
            }

            output += "</ul>";
            inList = false;
            output += line;
        }
        else
        {
            if(!inParagraph && line != "")
            {
                output += "<p>";
                inParagraph = true;
            }
            output += line;
        }
    }

    if(inList)
    {
        output += "</ul>";
        inList = false;
    }

    if(inParagraph)
    {
        output += "</p>";
        inParagraph = false;
    }

    // std::cout << output << std::endl;
    return output;
}
